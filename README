
1. Hashmap
The implementation is based on the creation and use of a hashmap (struct)
allocated dynamically, similar to the Java implementation that doubles the number of buckets
as needed (when the max_load factor is exceeded: number of items in hash map / number of buckets).

typedef struct symbol_mapping {
	char * symbol;
	char * mapping;
	struct symbol_mapping * next;
} * SymbolMapping, ** SymbolM;

typedef struct hashmap {
	SymbolM buckets;
	unsigned int bucket_count;
	unsigned int size; / * number of elements in the map * /
} * Hashmap, ** HashM;

SymbolM buckets is a simple list of buckets.
The implementation is efficient because lookups and inserts are done in O(1) (amortized).


2. Directory list
The singly linked list that contains the names of the directories in which the search will be made.
The input directory will be first in the list.

typedef struct input_dir {
	char * dirname;
	struct input_dir * next;
} * InputDirs, ** InputD;


Important steps:

1. Checks the CL arguments, exits the program with an error code
if they don't match the given patterns.
Adds symbols / values in the hashmap
Depending on the existence of the input / output files from CL,
makes a decision.

~ redirectIOandProcessInput ~

2. Redirect input:

- if there is an input file: opens it, reads from it
- if not: stdin

- if there is an output file: opens it, reads from it
- if not: stdout

3. processInput:
- separate the buffer and for each directive choose what it will do next,
so:

~ for #define:
1) assign the symbol
2.0) if there is nothing left on the line: mapping = ""
2.1) if there is something else on the mapping line = that something.
2.2) if the line ends in \, we will have a multiline define,
so we read from the buffer until it no longer encounters \ and we concatenate it to the mapping
2.3) each token that will be found in  mapping will be first searched in the
hashmap to be replaced early (nested #define)
3) add symbol-mapping in hashmap

~ for #undef:
- delete the symbol - mapping element from the hashmap

~ for #if, #elif, #else, #ifdef, #ifndef, #endif
1) we have a vector of data structures that will store information
about the states to go through depending on # encountered

struct if_tracking {
int if_cond;
you are_if;
int is_else;
};


#if -> increments the position in the structure (we have a new if)
1) is_if = True, is_else = False
2) check if the condition is true:
* transforms the string into int
-> if it is different from 0, it means that it is a
number and can be evaluated -> if_cond = True
-> if not -> search the hashmap for
find out its value -> if it is evaluated for something
different from 0 -> if_cond = True, otherwise False
3) at the next iteration (if not from the if family),
will handle the buffer and print to the output if any
true condition, otherwise skip line

#elif -> does not change position in vector
1), 2) and 3) as in #if

#else -> does not change position in vector (is related to an existing if)
1) is_if = False, is_else = True
2) at the next iteration (if it is not from the if family),
will handle the buffer and print out if the condition from the previous
if is NOT true, otherwise skip line

#ifdef -> increment the position in the structure (we have a new if)
1) is_if = True, is_else = False
2) search the hashmap for the symbol, if any: if_cond = True, otherwise False
3) at the next iteration (if not from the if family), it will handle the buffer
and print out if there is any true condition, otherwise skip line

#ifndef -> same as #ifdef, but vice versa

#endif -> decrements the position in the if vector


~ for #include:
- we resume the procedure we have applied so far (eg. steps 2 and 3
until we have no process), so the functions would be called as follows:

from main -> redirectIOandProcessInput () -> processInput (input) -
here it is possible to find the header file -> redirectIOandProcessInput () ->
if the file is invalid - stop, otherwise -> processInput (header) -
if it finds another header the same way, until it returns to processInput (input),
then in redirect ..., then in the main


~ when we have no directive:
we go through the buffer line and replace any symbols that have mappings
(I implemented a special strtok that takes care of this to return
start and stop positions and other calculations required for the replacement)

